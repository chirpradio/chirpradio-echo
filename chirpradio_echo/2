from multiprocessing import Lock, Pipe, Pool, Process, Queue
import optparse
import time
import uuid

lock = Lock()
pool = None
heartbeat_pipe, task_pipe = Pipe()


class Log(object):

    def info(self, msg):
        lock.acquire()
        try:
            print msg
        finally:
            lock.release()

log = Log()

POOL_APPLY_ASYNC = 1


def _id(fn):
    return '%s-%s' % (fn.__name__, uuid.uuid4())


class RemoteTask(object):

    def __init__(self, id):
        self.id = id

    def delay(self, *args, **kw):
        task_pipe.send([POOL_APPLY_ASYNC, self.id, args, kw])



class HeartbeatTasks(object):
    registry = {}

    @classmethod
    def register(cls, fn):
        id = _id(fn)
        cls.registry[id] = fn
        return id


def task(fn):
    id = HeartbeatTasks.register(fn)
    return RemoteTask(id)


@task
def slicer(*args, **kw):
    log.info('slicing...')
    #nested.delay()
    time.sleep(4)
    log.info('done')


def slicer2(*args, **kw):
    log.info('slicing...')
    #nested.delay()
    time.sleep(4)
    log.info('done')

@task
def nested(*args, **kw):
    log.info('nested')


def heartbeat(opt):
    global pool
    log.info('Starting %s worker(s)' % opt.workers)
    pool = Pool(processes=opt.workers)
    slicer.delay()
    #pool.apply_async(slicer2, [])
    while 1:
        msg = heartbeat_pipe.recv()
        if msg[0] not in (POOL_APPLY_ASYNC,):
            raise ValueError('Unknown msg: %s' % msg)
        fn = HeartbeatTasks.registry[msg[1]]
        args, kw = msg[2:]
        print fn
        print fn.__name__
        print dir(fn)
        from pdb import set_trace as st;st()
        pool.apply_async(fn, args, kw)
        #pool.apply_async(slicer2, args, kw)
        time.sleep(0.5)


def main():
    p = optparse.OptionParser(usage='%prog [options]')
    p.add_option('-w', '--workers', type=int, default=4,
                 help='Number of multiprocessing pool workers. '
                      'Default: %default')
    (options, args) = p.parse_args()
    heartbeat(options)


if __name__ == '__main__':
    main()
